/*
Find all possible combinations of k numbers that add up to a number n,
given that only numbers from 1 to 9 can be used 
and each combination should be a unique set of numbers.


Example 1:
  Input: k = 3, n = 7
  Output: [[1,2,4]]

Example 2:
  Input: k = 3, n = 9
  Output: [[1,2,6], [1,3,5], [2,3,4]]
  
 */
 
 /*
 输入两个整数k和n，从1-9这10个数中选k个数，他们的和为n，求所有这样的情况(相同的三个数只输出一次)
 
 
 算法思路：
 典型的回溯法，每一步尝试选取整数i，考虑n-i能否分成k-1个整数，本题需要考虑边界条件
 */
 
class Solution {
public:
    void combinationSum3(vector<vector<int>> &ret,vector<int> &path,int start,int k, int n) {
        if(k==0&&n==0){
            ret.push_back(path);
            return;
        }
        for(int i=start;i<=10-k&&i<=n;i++){
            path.push_back(i);
            combinationSum3(ret,path,i+1,k-1,n-i);
            path.pop_back();
        }
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ret;
        vector<int> path;
        combinationSum3(ret,path,1,k,n);
        return ret;
    }
};
 
 
