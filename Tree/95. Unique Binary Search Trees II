/*
  Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1...n.

  For example,
  Given n = 3, your program should return all 5 unique BST's shown below.

     1         3     3      2      1
      \       /     /      / \      \
       3     2     1      1   3      2
      /     /       \                 \
     2     1         2                 3
  给定一个数n，求1~n构成的所有二叉排序树（BST）
*/


/*
  算法思路：采用分治的思想，对于选定的根节点i（1<=i<=n）,对其左子树和右子数的求解仍然可以看成一个求给定n和偏置bias求解所有二叉排序树的问题。
          对于  1,···,i-1,i,i+1,···,n（n,bias）
          根节点：i
          左子树：1,···,i-1（i-1,bias）
          右子数：i+1,···,n  ->1,···,n-i（n-i,bias+i）
 */
 
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> v;
        if(n<=0)return v;
        return generateTrees(n,0);
    }
    vector<TreeNode*> generateTrees(int n,int bias) {
        vector<TreeNode*> v;
        if(n<=0){
            v.push_back(NULL);
            return v;
        }
        if(n==1){
            v.push_back(new TreeNode(1+bias));
            return v;
        }
        for(auto i=1;i<=n;i++){
            vector<TreeNode*> left=generateTrees(i-1,bias);
            vector<TreeNode*> right=generateTrees(n-i,i+bias);
            for(auto lit=0;lit<left.size();lit++){
                for(auto rit=0;rit<right.size();rit++){
                    TreeNode *root=new TreeNode(i+bias);
                    root->left=left[lit];
                    root->right=right[rit];
                    v.push_back(root);
                }
            }
        }
        
        return v;
    }
};
